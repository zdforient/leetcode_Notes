//1. dif of map and unordered_map
key of map is saved in a binary manner and find a key in map take O(log N) time
key of unordered_map is saved in a hash table. it's like 00111010110 to find a key, usually it takes O(1) time to find a key.
if a key is saved in a "a, aa, aaa,aav, aavd" manner, it could take O(N) time

//2. find largest num in set
if(!myset.empty())
    *myset.rbegin();
else
    //the set is empty
    
//min
*myset.begin();


//3. find largest and min num in map and unordered_map

//map
template <class Key, class Value>
std::pair<Key, Value> findMaxValuePair(
    std::map<Key, Value> const &x)
{
    return *std::max_element(x.begin(), x.end(),
                             [](const std::pair<Key, Value> &p1,
                                const std::pair<Key, Value> &p2)
                             {
                                 return p1.second < p2.second;
                             });
}

//unordered_map
template <class Key, class Value>
std::pair<Key, Value> findMaxValuePair(
    std::unordered_map<Key, Value> const &x)
{
    return *std::max_element(x.begin(), x.end(),
                             [](const std::pair<Key, Value> &p1,
                                const std::pair<Key, Value> &p2)
                             {
                                 return p1.second < p2.second;
                             });
}

//*map
template <class Container>
auto findMaxValuePair(Container const &x) 
    -> typename Container::value_type
{
    using value_t = typename Container::value_type;
    const auto compare = [](value_t const &p1, value_t const &p2)
    {
        return p1.second < p2.second;
    };
    return *std::max_element(x.begin(), x.end(), compare);
}


//4. set insert operation
auto a = s.insert(n);
//a is the loc/pointer that point to n in set a;
